
# Problem Description
# Given an index k, return the kth row of the Pascal's triangle.
# Pascal's triangle: To generate A[C] in row R, sum up A'[C] and A'[C-1] from previous row R - 1.
# Example:
# Input : k = 3
# Return : [1,3,3,1]
# Note: k is 0 based. k = 0, corresponds to the row [1].
# Note: Could you optimize your algorithm to use only O(k) extra space?
# code:
def getRow(k):
    if k < 0:
        return []

    row = [0] * (k + 1)
    row[0] = 1

    for i in range(1, k + 1):
        for j in range(i, 0, -1):
            row[j] += row[j - 1]

    return row

# Take input from the user
try:
    k = int(input())
    result = getRow(k)
    print(f"The {k}-th row of Pascal's triangle is: {result}")
except ValueError:
    print("Please enter a valid integer.")
